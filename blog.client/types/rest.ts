/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

import * as moment from 'moment';

export interface IClient {
    /**
     * Lấy danh sách các tài khoản
     */
    account_List(): Promise<AccountResponse[] | null>;
    /**
     * Chỉnh Sửa thông tin tài khoản
     * @param account Thông tin tài khoản
     * @return Thành công
     */
    account_Update(account: AccountUpdateRequest): Promise<AccountResponse | null>;
    /**
     * Lấy thông tin của một tài khoản
     * @param id Id tài khoản
     * @return Tìm thấy
     */
    account_GetById(id: number): Promise<AccountResponse | null>;
    /**
     * Lấy thông tin tài khoản của chính mình
     * @return Tìm thấy
     */
    account_Me(): Promise<AccountResponse | null>;
    /**
     * Đổi mật khẩu cho tài khoản
     * @param request Thông tin mật khẩu
     * @return Đổi mật khẩu thành công
     */
    account_ChangePassword(request: AccountChangePasswordRequest): Promise<void>;
    /**
     * Phân quyền, cập nhật quyền
     * @param request Thông tin tài khoản và quyền mới
     * @return Đổi mật khẩu thành công
     */
    account_UpdateAccess(request: AccountUpdateAccessRequest): Promise<void>;
    /**
     * Đăng ký mới một tài khoản
     * @param account Thông tin tài khoản
     * @return Thành công
     */
    account_Register(account: AccountCreateRequest): Promise<AccountResponse | null>;
    /**
     * Đăng nhập
     * @param account Thông tin đăng nhập
     * @return Thành công
     */
    account_Login(account: AccountLoginRequest): Promise<AccountLoginResponse | null>;
    /**
     * Lấy danh sách các bình luận
     */
    comment_Index(): Promise<CommentResponse[] | null>;
    /**
     * Đăng một bình luận mới
     * @param comment Nội dung bình luận
     * @return Thành công
     */
    comment_Create(comment: CommentCreateRequest): Promise<CommentResponse | null>;
    /**
     * Sửa một bình luận
     * @param comment Nội dung bình luận
     * @return Thành công
     */
    comment_Update(comment: CommentUpdateRequest): Promise<CommentResponse | null>;
    /**
     * Lấy một bình luận
     * @param id Id bình luận
     * @return Tìm thấy
     */
    comment_Item(id: number): Promise<CommentResponse | null>;
    /**
     * Xóa một bình luận
     * @param id Id bình luận
     * @return Xóa thành công
     */
    comment_Delete(id: number): Promise<void>;
    /**
     * Lấy danh sách các bài viết
     */
    post_Index(): Promise<PostResponse[] | null>;
    /**
     * Đăng một bài viết mới
     * @param post Nội dung một bài đăng
     * @return Thành công
     */
    post_Create(post: PostCreateRequest): Promise<PostResponse | null>;
    /**
     * Sửa một bài viết
     * @param post Nội dung một bài viết
     * @return Thành công
     */
    post_Update(post: PostUpdateRequest): Promise<PostResponse | null>;
    /**
     * Lấy một bài viết
     * @param id Id bài viết
     * @return Tìm thấy
     */
    post_Item(id: number): Promise<PostResponse | null>;
    /**
     * Xóa một bài viết
     * @param id Id bài viết
     * @return Xóa thành công
     */
    post_Delete(id: number): Promise<void>;
}

export class Client implements IClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Lấy danh sách các tài khoản
     */
    account_List(): Promise<AccountResponse[] | null> {
        let url_ = this.baseUrl + "/api/account";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAccount_List(_response);
        });
    }

    protected processAccount_List(response: AxiosResponse): Promise<AccountResponse[] | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AccountResponse.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountResponse[] | null>(<any>null);
    }

    /**
     * Chỉnh Sửa thông tin tài khoản
     * @param account Thông tin tài khoản
     * @return Thành công
     */
    account_Update(account: AccountUpdateRequest): Promise<AccountResponse | null> {
        let url_ = this.baseUrl + "/api/account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(account);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAccount_Update(_response);
        });
    }

    protected processAccount_Update(response: AxiosResponse): Promise<AccountResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? AccountResponse.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorResponse.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountResponse | null>(<any>null);
    }

    /**
     * Lấy thông tin của một tài khoản
     * @param id Id tài khoản
     * @return Tìm thấy
     */
    account_GetById(id: number): Promise<AccountResponse | null> {
        let url_ = this.baseUrl + "/api/account/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAccount_GetById(_response);
        });
    }

    protected processAccount_GetById(response: AxiosResponse): Promise<AccountResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? AccountResponse.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountResponse | null>(<any>null);
    }

    /**
     * Lấy thông tin tài khoản của chính mình
     * @return Tìm thấy
     */
    account_Me(): Promise<AccountResponse | null> {
        let url_ = this.baseUrl + "/api/account/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAccount_Me(_response);
        });
    }

    protected processAccount_Me(response: AxiosResponse): Promise<AccountResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? AccountResponse.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountResponse | null>(<any>null);
    }

    /**
     * Đổi mật khẩu cho tài khoản
     * @param request Thông tin mật khẩu
     * @return Đổi mật khẩu thành công
     */
    account_ChangePassword(request: AccountChangePasswordRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/account/changepassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAccount_ChangePassword(_response);
        });
    }

    protected processAccount_ChangePassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Phân quyền, cập nhật quyền
     * @param request Thông tin tài khoản và quyền mới
     * @return Đổi mật khẩu thành công
     */
    account_UpdateAccess(request: AccountUpdateAccessRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/account/updateaccess";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAccount_UpdateAccess(_response);
        });
    }

    protected processAccount_UpdateAccess(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Đăng ký mới một tài khoản
     * @param account Thông tin tài khoản
     * @return Thành công
     */
    account_Register(account: AccountCreateRequest): Promise<AccountResponse | null> {
        let url_ = this.baseUrl + "/api/account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(account);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAccount_Register(_response);
        });
    }

    protected processAccount_Register(response: AxiosResponse): Promise<AccountResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = resultData201 ? AccountResponse.fromJS(resultData201) : <any>null;
            return result201;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorResponse.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountResponse | null>(<any>null);
    }

    /**
     * Đăng nhập
     * @param account Thông tin đăng nhập
     * @return Thành công
     */
    account_Login(account: AccountLoginRequest): Promise<AccountLoginResponse | null> {
        let url_ = this.baseUrl + "/api/account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(account);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAccount_Login(_response);
        });
    }

    protected processAccount_Login(response: AxiosResponse): Promise<AccountLoginResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorResponse.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = resultData201 ? AccountLoginResponse.fromJS(resultData201) : <any>null;
            return result201;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountLoginResponse | null>(<any>null);
    }

    /**
     * Lấy danh sách các bình luận
     */
    comment_Index(): Promise<CommentResponse[] | null> {
        let url_ = this.baseUrl + "/api/comment";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processComment_Index(_response);
        });
    }

    protected processComment_Index(response: AxiosResponse): Promise<CommentResponse[] | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CommentResponse.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CommentResponse[] | null>(<any>null);
    }

    /**
     * Đăng một bình luận mới
     * @param comment Nội dung bình luận
     * @return Thành công
     */
    comment_Create(comment: CommentCreateRequest): Promise<CommentResponse | null> {
        let url_ = this.baseUrl + "/api/comment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(comment);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processComment_Create(_response);
        });
    }

    protected processComment_Create(response: AxiosResponse): Promise<CommentResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = resultData201 ? CommentResponse.fromJS(resultData201) : <any>null;
            return result201;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorResponse.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CommentResponse | null>(<any>null);
    }

    /**
     * Sửa một bình luận
     * @param comment Nội dung bình luận
     * @return Thành công
     */
    comment_Update(comment: CommentUpdateRequest): Promise<CommentResponse | null> {
        let url_ = this.baseUrl + "/api/comment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(comment);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processComment_Update(_response);
        });
    }

    protected processComment_Update(response: AxiosResponse): Promise<CommentResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? CommentResponse.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorResponse.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CommentResponse | null>(<any>null);
    }

    /**
     * Lấy một bình luận
     * @param id Id bình luận
     * @return Tìm thấy
     */
    comment_Item(id: number): Promise<CommentResponse | null> {
        let url_ = this.baseUrl + "/api/comment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processComment_Item(_response);
        });
    }

    protected processComment_Item(response: AxiosResponse): Promise<CommentResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? CommentResponse.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CommentResponse | null>(<any>null);
    }

    /**
     * Xóa một bình luận
     * @param id Id bình luận
     * @return Xóa thành công
     */
    comment_Delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/comment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processComment_Delete(_response);
        });
    }

    protected processComment_Delete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Lấy danh sách các bài viết
     */
    post_Index(): Promise<PostResponse[] | null> {
        let url_ = this.baseUrl + "/api/post";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processPost_Index(_response);
        });
    }

    protected processPost_Index(response: AxiosResponse): Promise<PostResponse[] | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PostResponse.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PostResponse[] | null>(<any>null);
    }

    /**
     * Đăng một bài viết mới
     * @param post Nội dung một bài đăng
     * @return Thành công
     */
    post_Create(post: PostCreateRequest): Promise<PostResponse | null> {
        let url_ = this.baseUrl + "/api/post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(post);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processPost_Create(_response);
        });
    }

    protected processPost_Create(response: AxiosResponse): Promise<PostResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorResponse.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = resultData201 ? PostResponse.fromJS(resultData201) : <any>null;
            return result201;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PostResponse | null>(<any>null);
    }

    /**
     * Sửa một bài viết
     * @param post Nội dung một bài viết
     * @return Thành công
     */
    post_Update(post: PostUpdateRequest): Promise<PostResponse | null> {
        let url_ = this.baseUrl + "/api/post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(post);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processPost_Update(_response);
        });
    }

    protected processPost_Update(response: AxiosResponse): Promise<PostResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorResponse.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? PostResponse.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PostResponse | null>(<any>null);
    }

    /**
     * Lấy một bài viết
     * @param id Id bài viết
     * @return Tìm thấy
     */
    post_Item(id: number): Promise<PostResponse | null> {
        let url_ = this.baseUrl + "/api/post/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processPost_Item(_response);
        });
    }

    protected processPost_Item(response: AxiosResponse): Promise<PostResponse | null> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? PostResponse.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PostResponse | null>(<any>null);
    }

    /**
     * Xóa một bài viết
     * @param id Id bài viết
     * @return Xóa thành công
     */
    post_Delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/post/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processPost_Delete(_response);
        });
    }

    protected processPost_Delete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? ErrorResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class BaseDataTransfersOfAccountAndAccountResponse implements IBaseDataTransfersOfAccountAndAccountResponse {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountResponse {
}

export class AccountResponse extends BaseDataTransfersOfAccountAndAccountResponse implements IAccountResponse {
    id!: number;
    password?: string | null;
    name?: string | null;
    email?: string | null;
    picture?: string | null;
    access!: EnumAccess;
    gender!: EnumGender;
    joined!: moment.Moment;

    constructor(data?: IAccountResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.picture = data["picture"] !== undefined ? data["picture"] : <any>null;
            this.access = data["access"] !== undefined ? data["access"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.joined = data["joined"] ? moment.parseZone(data["joined"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): AccountResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["picture"] = this.picture !== undefined ? this.picture : <any>null;
        data["access"] = this.access !== undefined ? this.access : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["joined"] = this.joined ? this.joined.toISOString(true) : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountResponse extends IBaseDataTransfersOfAccountAndAccountResponse {
    id: number;
    password?: string | null;
    name?: string | null;
    email?: string | null;
    picture?: string | null;
    access: EnumAccess;
    gender: EnumGender;
    joined: moment.Moment;
}

export enum EnumAccess {
    Administrator = "Administrator", 
    Moderator = "Moderator", 
    NormalUser = "NormalUser", 
    BannedUser = "BannedUser", 
}

export enum EnumGender {
    Male = "Male", 
    Female = "Female", 
    Unknown = "Unknown", 
}

export class ErrorResponse implements IErrorResponse {
    action?: string | null;
    description?: string | null;
    model?: string | null;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.action = data["action"] !== undefined ? data["action"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        return data; 
    }
}

export interface IErrorResponse {
    action?: string | null;
    description?: string | null;
    model?: string | null;
}

export class AccountChangePasswordRequest implements IAccountChangePasswordRequest {
    password?: string | null;
    newPassword?: string | null;

    constructor(data?: IAccountChangePasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any): AccountChangePasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountChangePasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data; 
    }
}

export interface IAccountChangePasswordRequest {
    password?: string | null;
    newPassword?: string | null;
}

export class BaseDataTransfersOfAccountAndAccountUpdateRequest implements IBaseDataTransfersOfAccountAndAccountUpdateRequest {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountUpdateRequest {
}

export class AccountUpdateRequest extends BaseDataTransfersOfAccountAndAccountUpdateRequest implements IAccountUpdateRequest {
    name?: string | null;
    picture?: string | null;
    gender!: EnumGender;

    constructor(data?: IAccountUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.picture = data["picture"] !== undefined ? data["picture"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
        }
    }

    static fromJS(data: any): AccountUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["picture"] = this.picture !== undefined ? this.picture : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountUpdateRequest extends IBaseDataTransfersOfAccountAndAccountUpdateRequest {
    name?: string | null;
    picture?: string | null;
    gender: EnumGender;
}

export class AccountUpdateAccessRequest implements IAccountUpdateAccessRequest {
    account?: AccountIdTransfer | null;
    access!: EnumAccess;

    constructor(data?: IAccountUpdateAccessRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.account = data["account"] ? AccountIdTransfer.fromJS(data["account"]) : <any>null;
            this.access = data["access"] !== undefined ? data["access"] : <any>null;
        }
    }

    static fromJS(data: any): AccountUpdateAccessRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountUpdateAccessRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["account"] = this.account ? this.account.toJSON() : <any>null;
        data["access"] = this.access !== undefined ? this.access : <any>null;
        return data; 
    }
}

export interface IAccountUpdateAccessRequest {
    account?: AccountIdTransfer | null;
    access: EnumAccess;
}

export class BaseDataTransfersOfAccountAndAccountIdTransfer implements IBaseDataTransfersOfAccountAndAccountIdTransfer {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountIdTransfer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountIdTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountIdTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountIdTransfer {
}

export class AccountIdTransfer extends BaseDataTransfersOfAccountAndAccountIdTransfer implements IAccountIdTransfer {
    id!: number;
    email?: string | null;

    constructor(data?: IAccountIdTransfer) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
        }
    }

    static fromJS(data: any): AccountIdTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new AccountIdTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountIdTransfer extends IBaseDataTransfersOfAccountAndAccountIdTransfer {
    id: number;
    email?: string | null;
}

export class BaseDataTransfersOfAccountAndAccountCreateRequest implements IBaseDataTransfersOfAccountAndAccountCreateRequest {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountCreateRequest {
}

export class AccountCreateRequest extends BaseDataTransfersOfAccountAndAccountCreateRequest implements IAccountCreateRequest {
    password?: string | null;
    name?: string | null;
    email?: string | null;
    picture?: string | null;
    gender!: EnumGender;

    constructor(data?: IAccountCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.picture = data["picture"] !== undefined ? data["picture"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
        }
    }

    static fromJS(data: any): AccountCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["picture"] = this.picture !== undefined ? this.picture : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountCreateRequest extends IBaseDataTransfersOfAccountAndAccountCreateRequest {
    password?: string | null;
    name?: string | null;
    email?: string | null;
    picture?: string | null;
    gender: EnumGender;
}

export class AccountLoginResponse implements IAccountLoginResponse {
    token?: string | null;

    constructor(data?: IAccountLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
        }
    }

    static fromJS(data: any): AccountLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token !== undefined ? this.token : <any>null;
        return data; 
    }
}

export interface IAccountLoginResponse {
    token?: string | null;
}

export class BaseDataTransfersOfAccountAndAccountLoginRequest implements IBaseDataTransfersOfAccountAndAccountLoginRequest {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountLoginRequest {
}

export class AccountLoginRequest extends BaseDataTransfersOfAccountAndAccountLoginRequest implements IAccountLoginRequest {
    email?: string | null;
    password?: string | null;

    constructor(data?: IAccountLoginRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): AccountLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountLoginRequest extends IBaseDataTransfersOfAccountAndAccountLoginRequest {
    email?: string | null;
    password?: string | null;
}

export class BaseDataTransfersOfCommentAndCommentResponse implements IBaseDataTransfersOfCommentAndCommentResponse {

    constructor(data?: IBaseDataTransfersOfCommentAndCommentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfCommentAndCommentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfCommentAndCommentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfCommentAndCommentResponse {
}

export class CommentResponse extends BaseDataTransfersOfCommentAndCommentResponse implements ICommentResponse {
    id!: number;
    content?: string | null;
    owner?: AccountIdTransfer | null;
    post?: PostIdTransfer | null;
    created!: moment.Moment;
    modified?: moment.Moment | null;

    constructor(data?: ICommentResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.owner = data["owner"] ? AccountIdTransfer.fromJS(data["owner"]) : <any>null;
            this.post = data["post"] ? PostIdTransfer.fromJS(data["post"]) : <any>null;
            this.created = data["created"] ? moment.parseZone(data["created"].toString()) : <any>null;
            this.modified = data["modified"] ? moment.parseZone(data["modified"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): CommentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CommentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>null;
        data["post"] = this.post ? this.post.toJSON() : <any>null;
        data["created"] = this.created ? this.created.toISOString(true) : <any>null;
        data["modified"] = this.modified ? this.modified.toISOString(true) : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICommentResponse extends IBaseDataTransfersOfCommentAndCommentResponse {
    id: number;
    content?: string | null;
    owner?: AccountIdTransfer | null;
    post?: PostIdTransfer | null;
    created: moment.Moment;
    modified?: moment.Moment | null;
}

export class BaseDataTransfersOfPostAndPostIdTransfer implements IBaseDataTransfersOfPostAndPostIdTransfer {

    constructor(data?: IBaseDataTransfersOfPostAndPostIdTransfer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostIdTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostIdTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostIdTransfer {
}

export class PostIdTransfer extends BaseDataTransfersOfPostAndPostIdTransfer implements IPostIdTransfer {
    id!: number;

    constructor(data?: IPostIdTransfer) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): PostIdTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new PostIdTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IPostIdTransfer extends IBaseDataTransfersOfPostAndPostIdTransfer {
    id: number;
}

export class BaseDataTransfersOfCommentAndCommentCreateRequest implements IBaseDataTransfersOfCommentAndCommentCreateRequest {

    constructor(data?: IBaseDataTransfersOfCommentAndCommentCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfCommentAndCommentCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfCommentAndCommentCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfCommentAndCommentCreateRequest {
}

export class CommentCreateRequest extends BaseDataTransfersOfCommentAndCommentCreateRequest implements ICommentCreateRequest {
    post?: PostIdTransfer | null;
    content?: string | null;

    constructor(data?: ICommentCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.post = data["post"] ? PostIdTransfer.fromJS(data["post"]) : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): CommentCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CommentCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["post"] = this.post ? this.post.toJSON() : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICommentCreateRequest extends IBaseDataTransfersOfCommentAndCommentCreateRequest {
    post?: PostIdTransfer | null;
    content?: string | null;
}

export class BaseDataTransfersOfCommentAndCommentUpdateRequest implements IBaseDataTransfersOfCommentAndCommentUpdateRequest {

    constructor(data?: IBaseDataTransfersOfCommentAndCommentUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfCommentAndCommentUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfCommentAndCommentUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfCommentAndCommentUpdateRequest {
}

export class CommentUpdateRequest extends BaseDataTransfersOfCommentAndCommentUpdateRequest implements ICommentUpdateRequest {
    id!: number;
    content?: string | null;

    constructor(data?: ICommentUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): CommentUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CommentUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICommentUpdateRequest extends IBaseDataTransfersOfCommentAndCommentUpdateRequest {
    id: number;
    content?: string | null;
}

export class BaseDataTransfersOfPostAndPostResponse implements IBaseDataTransfersOfPostAndPostResponse {

    constructor(data?: IBaseDataTransfersOfPostAndPostResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostResponse {
}

export class PostResponse extends BaseDataTransfersOfPostAndPostResponse implements IPostResponse {
    id!: number;
    title?: string | null;
    cover?: string | null;
    content?: string | null;
    owner?: AccountIdTransfer | null;
    created!: moment.Moment;
    modified?: moment.Moment | null;

    constructor(data?: IPostResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.cover = data["cover"] !== undefined ? data["cover"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.owner = data["owner"] ? AccountIdTransfer.fromJS(data["owner"]) : <any>null;
            this.created = data["created"] ? moment.parseZone(data["created"].toString()) : <any>null;
            this.modified = data["modified"] ? moment.parseZone(data["modified"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): PostResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PostResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["cover"] = this.cover !== undefined ? this.cover : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>null;
        data["created"] = this.created ? this.created.toISOString(true) : <any>null;
        data["modified"] = this.modified ? this.modified.toISOString(true) : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IPostResponse extends IBaseDataTransfersOfPostAndPostResponse {
    id: number;
    title?: string | null;
    cover?: string | null;
    content?: string | null;
    owner?: AccountIdTransfer | null;
    created: moment.Moment;
    modified?: moment.Moment | null;
}

export class BaseDataTransfersOfPostAndPostCreateRequest implements IBaseDataTransfersOfPostAndPostCreateRequest {

    constructor(data?: IBaseDataTransfersOfPostAndPostCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostCreateRequest {
}

export class PostCreateRequest extends BaseDataTransfersOfPostAndPostCreateRequest implements IPostCreateRequest {
    title?: string | null;
    cover?: string | null;
    content?: string | null;

    constructor(data?: IPostCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.cover = data["cover"] !== undefined ? data["cover"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): PostCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["cover"] = this.cover !== undefined ? this.cover : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IPostCreateRequest extends IBaseDataTransfersOfPostAndPostCreateRequest {
    title?: string | null;
    cover?: string | null;
    content?: string | null;
}

export class BaseDataTransfersOfPostAndPostUpdateRequest implements IBaseDataTransfersOfPostAndPostUpdateRequest {

    constructor(data?: IBaseDataTransfersOfPostAndPostUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostUpdateRequest {
}

export class PostUpdateRequest extends BaseDataTransfersOfPostAndPostUpdateRequest implements IPostUpdateRequest {
    id!: number;
    title?: string | null;
    cover?: string | null;
    content?: string | null;

    constructor(data?: IPostUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.cover = data["cover"] !== undefined ? data["cover"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): PostUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["cover"] = this.cover !== undefined ? this.cover : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IPostUpdateRequest extends IBaseDataTransfersOfPostAndPostUpdateRequest {
    id: number;
    title?: string | null;
    cover?: string | null;
    content?: string | null;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}